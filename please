#!/usr/bin/env bash
# shellcheck disable=SC1117


_list_attrs() {
    nix-instantiate --strict --eval --expr "(import ./get-attrs.nix {}).all" | tr -d "[]\""
}

_force_nixpkgs() {
    # without evaluating this all our queries will fail
    nix-build ./nixpkgs-fetch.nix >/dev/null
}

build() {
    local pkg="$1"
    nix-build default.nix -A "$pkg"
}

install() {
    local pkg="$1"
    nix-env -f default.nix -iA "$pkg"
}

shell() {
    local pkg="$1"
    nix-shell default.nix -A "$pkg"
}

test() {
    local t="$1"
    nix-build default.nix -A "$t"
}

init() {
    echo "Initializing setup ..."
    exit 0
}

doctor() {
    OK="\e[32m‚úì\e[0m"
    FAIL=""
    echo -e "Running sanity checks:\n"

    if nix --version >/dev/null
    then
        echo -e "- Nix installed :  $OK" 
    else
        echo -e "\nCannot execute Nix! Please follow the instructions in the README.md"
        exit 1
    fi


    if nix-channel --list | grep contrail >/dev/null
    then
        echo -e "- contrail channel configured: $OK"
    else
        echo "contrail channel not configured"
        FAIL="."
    fi
    
    
    if nix show-config | grep "cache.nix.corp.cloudwatt.com" >/dev/null
    then 
        echo -e "- contrail cache configured: $OK" 
    else
        echo "cache not configured"
        FAIL="."
    fi

    if ! test -z "$FAIL"; then
        exit 1
    else
        echo -e "\nAll tests passed üëç"
    fi

}

list() {
    local args="$*"

    if [ -z "$args" ]; then
        _list_attrs | tr " " "\n"
    else
        _list_attrs | tr " " "\n" | grep "$args"
    fi
}

run-test(){
    local t="$1"
    nix-build default.nix -A "$t"
}

run-vm(){
    local t="$1"
    nix-build default.nix -A "$t".driver
    QEMU_NET_OPTS="hostfwd=tcp::8080-:8080,hostfwd=tcp::8143-:8143,hostfwd=tcp::2222-:22" result/bin/nixos-run-vms
}

usage() {
cat <<EOM
Usage: please <command> [args]"

 build [artifact]    -- build an artifact
 doctor              -- perform sanity checks
 init                -- configure initial setup
 install [artifact]  -- install an artifact
 list                -- list artifacts
 run-test [test]     -- run a test
 run-vm [test]       -- run an interactive vm of a test
 shell [artifact]    -- enter a dev shell for an artifact
EOM
}

_force_nixpkgs

if [ -z "$1" ]; then
    usage
    exit 1
fi


subcommand="$1"
shift

case "$subcommand" in
    build)
        build "$@"
        ;;
    install)
        install "$@"
        ;;
    shell)
        shell "$@"
        ;;
    init)
        init "$@"
        ;;
    list)
        list "$@"
        ;;
    run-test)
        run-test "$@"
        ;;
    run-vm)
        run-vm "$@"
        ;;
    doctor)
        doctor "$@"
        ;;
    *)
        echo "Error: unknown command: $subcommand"
        usage
        exit 1
esac
