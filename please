#!/usr/bin/env bash


_list_attrs() {
    nix-instantiate --strict --eval --expr "import ./get-attrs.nix {}" | tr -d "[]\""
}

_force_nixpkgs() {
    # without evaluating this all our queries will fail
    nix-build ./nixpkgs-fetch.nix >/dev/null
}

build() {
    local pkg="$1"
    nix-build default.nix -A "$pkg"
}

install() {
    local pkg="$1"
    nix-env -f default.nix -iA "$pkg"
}

shell() {
    local pkg="$1"
    nix-shell default.nix -A "$pkg"
}

init() {
    echo "Initializing setup ..."
    exit 0
}

doctor() {
    OK="\e[32m‚úì\e[0m"
    FAIL=""
    echo -e "Running sanity checks:\n"

    nix --version >/dev/null
    if [ "$?" -eq 0 ]; then
        echo -e "- Nix installed :  $OK" 
    else
        echo -e "\nCannot execute Nix! Please follow the instructions in the README.md"
        exit 1
    fi


    nix-channel --list | grep contrail >/dev/null
    if [ "$?" -eq 0 ]; then
        echo -e "- contrail channel configured: $OK"
    else
        echo "contrail channel not configured"
        FAIL="."
    fi
    
    
    nix show-config | grep "cache.nix.corp.cloudwatt.com" >/dev/null
    if [ "$?" -eq 0 ]; then 
        echo -e "- contrail cache configured: $OK" 
    else
        echo "cache not configured"
        FAIL="."
    fi

    if ! test -z "$FAIL"; then
        exit 1
    else
        echo -e "\nAll tests passed üëç"
    fi

}

list() {
    local args="$*"

    if [ -z "$args" ]; then
        _list_attrs | tr " " "\n"
    else
        _list_attrs | tr " " "\n" | grep "$args"
    fi
}

usage() {
    echo ""
    echo "Usage: please <build|install|shell|init|list|doctor> [args]"
    echo ""
    echo " build [artifact]    -- build an artifact"
    echo " install [artifact]  -- install an artifact"
    echo " shell [artifact]    -- enter a dev shell for an artifact"
    echo " test [test]         -- run a test"
    echo " vm [test]           -- run an interactive vm of a test"
    echo " init                -- configure initial setup"
    echo " list                -- list artifacts"
    echo " doctor              -- perform sanity checks"
    echo  ""
}

_force_nixpkgs

if [ -z "$1" ]; then
    usage
    exit 1
fi


subcommand="$1"
shift

case "$subcommand" in
    build)
        build "$@"
        ;;
    install)
        install "$@"
        ;;
    shell)
        shell "$@"
        ;;
    init)
        init "$@"
        ;;
    list)
        list "$@"
        ;;
    doctor)
        doctor "$@"
        ;;
esac
