#!/usr/bin/env bash
# shellcheck disable=SC1117

log() {
    local args="$*"
    PLEASE="\e[32m[please]:\e[0m"
    echo -e "$PLEASE $args"
}

log-run() {
    local cmd="$1"
    log "Running \"$cmd\"\n"
    eval $cmd
}


_list_attrs() {
    nix-instantiate --strict --eval --expr "(import ./get-attrs.nix {}).all" | tr -d "[]\""
}

_force_nixpkgs() {
    # without evaluating this all our queries will fail
    nix-build ./nixpkgs-fetch.nix >/dev/null
}

#
# sanity check functions
#

_isChannelInstalled() {
    nix-channel --list | grep contrail >/dev/null
}

_isSubstituterConfigured() {
    nix show-config | grep "cache.nix.corp.cloudwatt.com" >/dev/null
}

_isNixInstalled() {
    nix --version >/dev/null
}

_addCacheConfig() {
    if test -f ~/.config/nix/nix.conf
    then
        log "$HOME/.config/nix/nix.conf exists. Please follow the instructions from the README"
    else
        mkdir -p "$HOME"/.config/nix/
        cat << EOF > "$HOME"/.config/nix/nix.conf
substituters = https://cache.nixos.org  https://cache.nix.corp.cloudwatt.com
trusted-substituters = https://cache.nix.corp.cloudwatt.com
trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= cache.nix.cloudwatt.com:ApPt6XtZeOQ3hNRTSBQx+m6rd8p04G0DQwz0bZfVPL8= 
EOF
    fi
}

#
# subcommands
#

build() {
    local pkg="$1"
    log-run "nix-build default.nix -A $pkg"
}

install() {
    local pkg="$1"
    log-run "nix-env -f default.nix -iA $pkg"
}

shell() {
    local pkg="$1"
    log-run "nix-shell default.nix -A $pkg"
}

init() {
    log "Initializing setup ..."

    if _isChannelInstalled; then
        log "channel is already configured"
    else
        log "adding contrail channel"
        log-run "nix-channel --add https://hydra.nix.corp.cloudwatt.com/jobset/nixpkgs-tungsten/trunk/channel/latest contrail"
    fi

    if _isSubstituterConfigured; then
        log "cache is already configured"
    else
        log "adding contrail binary cache"
        _addCacheConfig
    fi
}

doctor() {
    OK="\e[32m‚úì\e[0m"
    FAIL=""
    log "Running sanity checks:\n"

    if _isNixInstalled
    then
        echo -e "- Nix installed :  $OK" 
    else
        echo -e "\nCannot execute Nix! Please follow the instructions in the README.md"
        exit 1
    fi

    if _isChannelInstalled
    then
        echo -e "- contrail channel configured: $OK"
    else
        echo "contrail channel not configured"
        FAIL="."
    fi
    
    if _isSubstituterConfigured
    then 
        echo -e "- contrail cache configured: $OK" 
    else
        echo "cache not configured"
        FAIL="."
    fi

    if [[ $FAIL = "" ]]; then
        echo -e "\nAll tests passed üëç"
    else
        exit 1
    fi
}

list() {
    local args="$*"

    if [ -z "$args" ]; then
        _list_attrs | tr " " "\n"
    else
        _list_attrs | tr " " "\n" | grep "$args"
    fi
}

run-test(){
    local t="$1"
    log-run "nix-build default.nix -A $t"
}

run-vm(){
    local t="$1"
    log-run "nix-build default.nix -A $t.driver"
    QEMU_NET_OPTS="hostfwd=tcp::8080-:8080,hostfwd=tcp::8143-:8143,hostfwd=tcp::2222-:22" result/bin/nixos-run-vms
}

usage() {
cat <<EOM
Usage: please <command> [args]

 build [artifact]    -- build an artifact
 doctor              -- perform sanity checks
 init                -- configure initial setup
 install [artifact]  -- install an artifact
 list                -- list artifacts
 run-test [test]     -- run a test
 run-vm [test]       -- run an interactive vm of a test
 shell [artifact]    -- enter a dev shell for an artifact
EOM
}


if [ -z "$1" ]; then
    usage
    exit 1
fi

_isChannelInstalled && _force_nixpkgs

subcommand="$1"
shift

case "$subcommand" in
    build)
        build "$@"
        ;;
    install)
        install "$@"
        ;;
    shell)
        shell "$@"
        ;;
    init)
        init "$@"
        ;;
    list)
        list "$@"
        ;;
    run-test)
        run-test "$@"
        ;;
    run-vm)
        run-vm "$@"
        ;;
    doctor)
        doctor "$@"
        ;;
    *)
        echo "Error: unknown command: $subcommand"
        usage
        exit 1
esac
